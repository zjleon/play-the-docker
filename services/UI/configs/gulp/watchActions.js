const {resolve, relative} = require('path')
const {readdirSync, createWriteStream, watch, statSync} = require('fs')

const projectRoot = resolve(__dirname, '../../')
const modulePath = resolve(projectRoot, './modules')
const sharedPath = resolve(projectRoot, './shared')
const destinationPath = resolve(projectRoot, './configs/gulpGenerated')
const warningMessage = '// Don\'t modify this file\n// This file is auto generated by gulp task "watchActions"\n'

function getActionsFromPath(path) {
  // const statSync(path)
  const items = readdirSync(path)
  const actions = items.reduce((accumulator, item) => {
    const actionRegExp = /([\w\d]*)[aA]ctions?\.js/g
    const itemPath = resolve(path, item)
    const itemStat = statSync(itemPath)
    if (itemStat.isDirectory()) {
      return accumulator.concat(getActionsFromPath(itemPath))
    }
    if (itemStat.isFile() && actionRegExp.test(item)) {
      accumulator.push(`export * from '${relative(destinationPath, itemPath)}'\n`)
    }
    return accumulator
  }, [])
  return actions
}

function generateActions(done) {
  const actions = getActionsFromPath(modulePath).concat(getActionsFromPath(sharedPath)).join('')
  let stream = createWriteStream(destinationPath + '/actions.js')
  stream.on('close', () => {
    console.log('actions updated')
    if (done) {
      done()
    }
  })
  stream.write(warningMessage)
  stream.write(actions)
  stream.end('\n')
}

function watchActions(done) {
  watch(
    modulePath,
    {recursive: true},
    (event, filePath) => {
      if (event === 'rename') {
        generateActions()
      }
    }
  )
  watch(
    sharedPath,
    {recursive: true},
    (event, filePath) => {
      if (event === 'rename') {
        generateActions()
      }
    }
  )
  done()
}

module.exports = {
  watchActions,
  generateActions,
}
