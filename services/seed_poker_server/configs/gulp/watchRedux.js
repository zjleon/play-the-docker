const {resolve, relative} = require('path')
const {readdirSync, createWriteStream, watch, statSync} = require('fs')

const projectRoot = resolve(__dirname, '../../')
const modulePath = resolve(projectRoot, './modules')
const sharedPath = resolve(projectRoot, './shared')
const destinationPath = resolve(projectRoot, './configs/gulpGenerated')
const warningMessage = '// Don\'t modify this file\n// This file is auto generated by gulp task "watchRedux"\n'

const actionRegExp = /([\w\d]*)[aA]ctions?\.js/g
const reducerRegExp = /([\w\d]*)[rR]educers?\.js/g

function getFilesFromPath(path) {
  const files = readdirSync(path)
  return files.reduce((accumulator, file) => {
    const itemPath = resolve(path, file)
    const itemStat = statSync(itemPath)

    let result = {}
    let previousResult
    if (itemStat.isDirectory()) {
      // when found directory, iterate it
      previousResult = getFilesFromPath(itemPath)
      result.actions = accumulator.actions.concat(previousResult.actions)
      result.reducers = accumulator.reducers.concat(previousResult.reducers)
      return result
    }
    // when found file, detect the file name
    if (itemStat.isFile()) {
      actionRegExp.lastIndex = 0
      if (actionRegExp.test(file)) {
        accumulator.actions.push(`export * from '${relative(destinationPath, itemPath)}'\n`)
      }
      reducerRegExp.lastIndex = 0
      let regexpResult = reducerRegExp.exec(file)
      let reducerName
      if (regexpResult) {
        if (regexpResult[1]) {
          reducerName = regexpResult[1].replace(/^\w/g, (firstLetter) => firstLetter.toLowerCase())
        } else {
          reducerName = itemPath.split('/')
          reducerName = reducerName[reducerName.length - 2].replace(/^\w/g, (firstLetter) => firstLetter.toLowerCase())
        }
        // reducerName += 'Reducer'
        accumulator.reducers.push(`import ${reducerName} from '${relative(destinationPath, itemPath)}'\n`)
      }
    }
    return accumulator
  }, {
    actions: [],
    reducers: []
  })
}

function generateReduxFiles(done) {
  const reduxFilesInModules = getFilesFromPath(modulePath)
  const reduxFilesInShared = getFilesFromPath(sharedPath)
  let promises = []

  // write the action file
  const actionPromise = new Promise((res, rej) => {
    const actions = reduxFilesInModules.actions.concat(reduxFilesInShared.actions).join('')
    let stream = createWriteStream(destinationPath + '/actions.js')
    stream.on('close', () => {
      console.log('actions updated')
      res()
    })
    stream.write(warningMessage)
    stream.write(actions)
    stream.end('\n')
  })
  promises.push(actionPromise)

  // write the reducer file
  const reducerPromise = new Promise((res, rej) => {
    const reducers = reduxFilesInModules.reducers.concat(reduxFilesInShared.reducers)
    stream = createWriteStream(destinationPath + '/reducers.js')
    stream.on('close', () => {
      console.log('reducers updated')
      res()
    })
    stream.write(warningMessage)
    stream.write(`import { combineReducers } from 'redux-immutable'\n`)
    stream.write(reducers.join(''))
    stream.write(`\nexport default combineReducers({\n`)
    reducers.map((reducer) => {
      const exportSentence = reducer.split(' ')
      stream.write(exportSentence[1] + ',\n')
    })
    stream.end('})\n')
  })
  promises.push(reducerPromise)

  Promise.all(promises).then(() => {
    if (done) {
      done()
    }
  })
}

function watchRedux(done) {
  watch(
    modulePath,
    {recursive: true},
    (event, filePath) => {
      actionRegExp.lastIndex = 0
      reducerRegExp.lastIndex = 0
      if (
        event === 'rename'
        && (
          actionRegExp.test(filePath)
          || reducerRegExp.test(filePath)
        )
      ) {
        generateReduxFiles()
      }
    }
  )
  watch(
    sharedPath,
    {recursive: true},
    (event, filePath) => {
      if (event === 'rename') {
        generateReduxFiles()
      }
    }
  )
  done()
}

module.exports = {
  watchRedux,
  generateReduxFiles,
}
